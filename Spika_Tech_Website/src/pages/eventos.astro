---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Layout from '../layouts/Layout.astro';
import SideNav from '../components/SideNav.astro';
import { eventos, obtenerEventosProximos, obtenerEventosPasados, formatearFecha } from '../data/eventos';

// Función para ordenar eventos por fecha
function ordenarEventosPorFecha(eventos) {
  return eventos.sort((a, b) => new Date(a.fecha) - new Date(b.fecha));
}

// Función para obtener eventos destacados: próximos 4 ordenados por fecha, si no hay suficientes, rellenar con últimos 4 pasados
function obtenerEventosDestacados() {
  const proximos = ordenarEventosPorFecha(obtenerEventosProximos());
  const pasados = ordenarEventosPorFecha(obtenerEventosPasados());
  
  // Si hay 4 o más eventos próximos, usar solo esos
  if (proximos.length >= 4) {
    return proximos.slice(0, 4);
  }
  
  // Si no hay suficientes próximos, combinar con pasados
  const eventosDestacados = [...proximos];
  const eventosPasadosNecesarios = 4 - proximos.length;
  
  // Tomar los últimos eventos pasados
  const ultimosPasados = pasados.slice(-eventosPasadosNecesarios);
  eventosDestacados.push(...ultimosPasados);
  
  return eventosDestacados;
}

// Función para obtener eventos paginados (5 por página)
function obtenerEventosPaginados(eventos, pagina = 1, porPagina = 5) {
  const eventosOrdenados = ordenarEventosPorFecha(eventos);
  const inicio = (pagina - 1) * porPagina;
  const fin = inicio + porPagina;
  return eventosOrdenados.slice(inicio, fin);
}

const events = obtenerEventosDestacados();
const upcomingEvents = obtenerEventosPaginados(obtenerEventosProximos(), 1, 5);
const pastEvents = obtenerEventosPaginados(obtenerEventosPasados(), 1, 5);
---

<Layout>
  <Header />
  <SideNav sections={[]} />
  <div class="min-h-screen flex flex-col" id="eventsPage">
    <div class="mb-8 p-12 bg-cover bg-center bg-no-repeat" style="background-image: url('/assets/Encabezado_Eventos.webp');">
      <div class="events__top__content">
        <h1 class="text-5xl font-bold text-white font-['Trebuchet_MS']" data-i18n="Eventos.title"></h1>
      </div>
      <div class="grid grid-cols-4 gap-8 mx-auto mt-8" id="eventsGrid">
        {events.map((event, index) => (
          <div class="event-item bg-white/10 backdrop-blur-sm rounded-lg p-4 cursor-pointer transition-all duration-300 hover:bg-white/20"
            data-event-id={event.id}
            data-index={index}>
            <div class="relative">
              <img src={event.image} alt={event.titulo} class="w-full h-32 object-cover rounded mb-3" />
              <div class="progress-bar absolute bottom-0 left-0 h-1 bg-[#CEDF00] transition-all duration-100" style="width: 0%"></div>
            </div>
            <h3 class="text-white font-semibold text-lg">{event.titulo}</h3>
            <p class="text-white/80 text-sm mt-2">{event.descripcion}</p>
          </div>
        ))}
      </div>
    </div>
    <span class="p-8 text-4xl font-bold text-[#003035] font-['Trebuchet_MS']" data-i18n="Eventos.events"></span>
    <div class="flex flex-row gap-8 px-8 pb-8 justify-between">
      <div class="flex flex-col w-[15%] min-w-[200px]">
        <div class="flex flex-row mb-4">
          <button class="px-4 py-2 border-none bg-white font-['Trebuchet_MS'] text-sm font-normal text-[#003035] cursor-pointer transition-all duration-300 relative z-10 rounded-md active-tab" data-tab="upcoming">
            <span data-i18n="Eventos.upcoming"></span>
          </button>
          <button class="px-4 py-2 border-none bg-white font-['Trebuchet_MS'] text-sm font-normal text-[#003035] cursor-pointer transition-all duration-300 relative z-10 rounded-md" data-tab="past">
            <span data-i18n="Eventos.past"></span>
          </button>
        </div>
        <div class="flex-1 overflow-y-auto" id="upcomingEventsList">
          {upcomingEvents.map((event) => (
            <div class="event-item p-3 cursor-pointer transition-all duration-300 relative" data-event-id={event.id}>
              <h3 class="m-0 text-base font-normal text-[#003035]">{event.titulo}</h3>
            </div>
          ))}
          {upcomingEvents.length === 0 && (
            <div class="p-4 text-center text-gray-500">
              <p>No hay eventos próximos disponibles</p>
            </div>
          )}
        </div>
        <div class="flex-1 overflow-y-auto hidden" id="pastEventsList">
          {pastEvents.map((event) => (
            <div class="event-item p-3 cursor-pointer transition-all duration-300 relative" data-event-id={event.id}>
              <h3 class="m-0 text-base font-normal text-[#003035]">{event.titulo}</h3>
            </div>
          ))}
        </div>
        <!-- Controles de paginación -->
        <div class="flex justify-between items-center mt-4 px-2" id="paginationControls">
          <button id="prevPage" class="px-3 py-1 bg-[#003035] text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed">
            Anterior
          </button>
          <span id="pageInfo" class="text-sm text-[#003035]">Página 1</span>
          <button id="nextPage" class="px-3 py-1 bg-[#003035] text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed">
            Siguiente
          </button>
        </div>
      </div>
      <div class="w-[25%] min-w-[300px] relative hidden" id="eventCard">
        <div class="h-full flex flex-col relative bg-[#003035]">
          <button class="absolute top-0 right-0 w-8 h-8 border-none bg-transparent text-white text-2xl cursor-pointer z-10 flex justify-center items-center transition-all duration-300 hover:text-[#CEDF00]" id="closeEventButton">×</button>
          <img id="eventImage" src="" alt="" class="w-full object-cover" />
          <div class="p-6 flex-1 flex flex-col">
            <h2 id="eventTitle" class="m-0 text-2xl font-semibold text-white font-['Trebuchet_MS']"></h2>
            <p id="eventDescription" class="my-4 leading-relaxed text-sm text-white font-['Trebuchet_MS'] flex-1"></p>
            <div class="flex justify-between items-center mt-auto">
              <div class="flex flex-col gap-1">
                <span class="text-xs text-white font-['Trebuchet_MS'] opacity-70" data-i18n="Eventos.event_date"></span>
                <p id="eventDate" class="m-0 text-sm text-white font-['Trebuchet_MS'] opacity-80"></p>
              </div>
              <button class="px-3 py-1 bg-transparent text-[#CEDF00] font-['Trebuchet_MS'] border border-[#CEDF00] rounded text-sm font-medium cursor-pointer transition-all duration-300 hover:border-[#CEDF00] hover:text-[#CEDF00]" data-i18n="Eventos.learn_more"></button>
            </div>
          </div>
        </div>
      </div>
      <div class="flex-1 flex justify-center items-center overflow-hidden">
        <div class="relative w-full mx-auto aspect-[2/1] map-container">
          <img src="/assets/Mapa.svg" alt="Mapa del mundo" class="w-full h-full object-contain absolute top-0 left-0 map-svg" style="transition: all 1.5s cubic-bezier(0.4, 0, 0.2, 1);" />
          <div class="absolute top-0 left-0 w-full h-full pointer-events-none map-points"></div>
          <button 
            id="resetZoomButton" 
            class="absolute top-4 right-4 bg-[#003035] text-white px-3 py-2 rounded-md text-sm font-medium opacity-0 pointer-events-none transition-all duration-300 hover:bg-[#CEDF00] hover:text-[#003035]"
            style="z-index: 10;">
            <span data-i18n="Eventos.reset_zoom">Ver todo el mapa</span>
          </button>
        </div>
      </div>
    </div>
  </div>
  <Footer />
</Layout>

<!-- Datos para el script -->
<script id="events-data" type="application/json" set:html={JSON.stringify(events)}></script>
<script id="upcoming-events-data" type="application/json" set:html={JSON.stringify(upcomingEvents)}></script>
<script id="past-events-data" type="application/json" set:html={JSON.stringify(pastEvents)}></script>

<style>
  .active-tab { 
    background: #003035 !important; 
    color: white !important; 
  }
  .event-item.active h3 { 
    color: #CEDF00 !important; 
    font-weight: 600 !important; 
  }
  .map-point:hover .point-tooltip { 
    display: block !important; 
  }
  .map-point.active { 
    background-color: #003035 !important; 
    z-index: 2 !important; 
  }
  
  /* Estilos para el zoom del mapa */
  .map-container {
    overflow: hidden;
  }
  
  .map-svg {
    transform-origin: center;
  }
  
  #resetZoomButton {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }
  
  #resetZoomButton:hover {
    transform: scale(1.05);
  }
</style>

<script>
  // Función para formatear fecha
  function formatearFecha(fecha) {
    return new Date(fecha).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }

  // Los datos se obtienen del servidor
  const events = JSON.parse(document.getElementById('events-data')?.textContent || '[]');
  const upcomingEvents = JSON.parse(document.getElementById('upcoming-events-data')?.textContent || '[]');
  const pastEvents = JSON.parse(document.getElementById('past-events-data')?.textContent || '[]');
  
  let currentEventIndex = 0;
  let progress = 0;
  let intervalId = null;
  const ANIMATION_DURATION = 10000;
  const UPDATE_INTERVAL = 100;
  let selectedEvent = null;
  let showPastEvents = false;
  let currentMapZoom = null;

  function renderMapPoints() {
    const mapContainer = document.querySelector('.map-points');
    if (!mapContainer) return;
    mapContainer.innerHTML = '';
    const currentEvents = showPastEvents ? pastEvents : upcomingEvents;
    currentEvents.forEach(event => {
      const point = document.createElement('div');
      point.className = 'map-point absolute w-2 h-2 rounded-full transform -translate-x-1/2 -translate-y-1/2 cursor-pointer transition-all duration-300 pointer-events-auto hover:z-10';
      point.style.backgroundColor = '#CEDF00';
      
      // Usar las coordenadas del zoom si existen, sino usar valores por defecto
      if (event.zoom && event.zoom.x && event.zoom.y) {
        point.style.left = `${event.zoom.x}%`;
        point.style.top = `${event.zoom.y}%`;
      } else {
        // Valores por defecto para España (Madrid)
        point.style.left = '30%';
        point.style.top = '40%';
      }
      
      point.dataset.eventId = String(event.id);
      
      // Agregar clase active si el evento está seleccionado
      if (selectedEvent && selectedEvent.id === event.id) {
        point.classList.add('active');
        point.style.backgroundColor = '#003035';
      }
      
      const tooltip = document.createElement('div');
      tooltip.className = 'point-tooltip hidden absolute bottom-full left-1/2 transform -translate-x-1/2 bg-[#003035] px-4 py-2 rounded text-white text-xs font-["Trebuchet_MS"] shadow-lg mb-2 whitespace-nowrap pointer-events-none';
      tooltip.textContent = event.titulo;
      point.appendChild(tooltip);
      
      point.addEventListener('click', () => selectEventFromMap(point));
      point.addEventListener('mouseenter', () => {
        tooltip.classList.remove('hidden');
        if (!point.classList.contains('active')) {
          point.style.backgroundColor = '#003035';
        }
      });
      point.addEventListener('mouseleave', () => {
        tooltip.classList.add('hidden');
        if (!point.classList.contains('active')) {
          point.style.backgroundColor = '#CEDF00';
        }
      });
      
      mapContainer.appendChild(point);
    });
  }

  function updateEventSelection() {
    document.querySelectorAll('.event-item').forEach(item => { item.classList.remove('active'); });
    if (selectedEvent) {
      const currentEvents = showPastEvents ? pastEvents : upcomingEvents;
      const eventIndex = currentEvents.findIndex(event => event.id === selectedEvent.id);
      const eventItems = document.querySelectorAll(`#${showPastEvents ? 'past' : 'upcoming'}EventsList .event-item`);
      if (eventItems[eventIndex]) eventItems[eventIndex].classList.add('active');
    }
    renderMapPoints();
  }

  function selectEvent(element) {
    const eventId = element.dataset.eventId;
    const currentEvents = showPastEvents ? pastEvents : upcomingEvents;
    selectedEvent = currentEvents.find(event => event.id === eventId);
    if (selectedEvent) {
      showEventCard(selectedEvent);
      updateEventSelection();
      if (selectedEvent.zoom) {
        zoomToEvent(selectedEvent);
      }
    }
  }

  function selectEventFromMap(element) {
    const eventId = element.dataset.eventId;
    const currentEvents = showPastEvents ? pastEvents : upcomingEvents;
    selectedEvent = currentEvents.find(event => event.id === eventId);
    if (selectedEvent) {
      showEventCard(selectedEvent);
      updateEventSelection();
      if (selectedEvent.zoom) {
        zoomToEvent(selectedEvent);
      }
    }
  }

  function showEventCard(event) {
    const card = document.getElementById('eventCard');
    const image = document.getElementById('eventImage');
    const title = document.getElementById('eventTitle');
    const description = document.getElementById('eventDescription');
    const date = document.getElementById('eventDate');
    if (image && title && description && date && card) {
      image.src = event.image;
      image.alt = event.titulo;
      title.textContent = event.titulo;
      description.textContent = event.descripcion;
      date.textContent = formatearFecha(event.fecha);
      card.classList.remove('hidden');
    }
  }

  function closeEventCard() {
    const eventCard = document.getElementById('eventCard');
    if (eventCard) eventCard.classList.add('hidden');
    selectedEvent = null;
    updateEventSelection();
    resetMapZoom();
  }

  // Función para hacer zoom al evento seleccionado
  function zoomToEvent(event) {
    if (!event.zoom) return;
    
    const mapSvg = document.querySelector('.map-svg');
    const resetButton = document.getElementById('resetZoomButton');
    if (!mapSvg) return;
    
    currentMapZoom = event.zoom;
    
    // Aplicar transformación de zoom
    mapSvg.style.transform = `scale(${event.zoom.scale}) translate(${event.zoom.x}%, ${event.zoom.y}%)`;
    
    // Ocultar puntos que no están en la zona de zoom
    const allPoints = document.querySelectorAll('.map-point');
    allPoints.forEach(point => {
      const pointEventId = point.dataset.eventId;
      if (pointEventId !== event.id) {
        point.style.opacity = '0.3';
        point.style.pointerEvents = 'none';
      } else {
        point.style.opacity = '1';
        point.style.pointerEvents = 'auto';
      }
    });
    
    // Mostrar botón de reset
    if (resetButton) {
      resetButton.style.opacity = '1';
      resetButton.style.pointerEvents = 'auto';
    }
  }

  // Función para resetear el zoom del mapa
  function resetMapZoom() {
    const mapSvg = document.querySelector('.map-svg');
    const resetButton = document.getElementById('resetZoomButton');
    if (!mapSvg) return;
    
    currentMapZoom = null;
    mapSvg.style.transform = 'scale(1) translate(0%, 0%)';
    
    // Restaurar todos los puntos
    const allPoints = document.querySelectorAll('.map-point');
    allPoints.forEach(point => {
      point.style.opacity = '1';
      point.style.pointerEvents = 'auto';
    });
    
    // Ocultar botón de reset
    if (resetButton) {
      resetButton.style.opacity = '0';
      resetButton.style.pointerEvents = 'none';
    }
  }

  // Función para hacer zoom a una región específica
  function zoomToRegion(region) {
    const mapSvg = document.querySelector('.map-svg');
    if (!mapSvg) return;
    
    currentMapZoom = region;
    mapSvg.style.transform = `scale(${region.scale}) translate(${region.translateX}%, ${region.translateY}%)`;
  }

  function toggleEventType(showPast) {
    showPastEvents = showPast;
    selectedEvent = null;
    document.querySelectorAll('[data-tab]').forEach(btn => { btn.classList.remove('active-tab'); });
    const activeTab = document.querySelector(`[data-tab="${showPast ? 'past' : 'upcoming'}"]`);
    if (activeTab) activeTab.classList.add('active-tab');
    const upcomingList = document.getElementById('upcomingEventsList');
    const pastList = document.getElementById('pastEventsList');
    const eventCard = document.getElementById('eventCard');
    if (upcomingList && pastList && eventCard) {
      upcomingList.classList.toggle('hidden', showPast);
      pastList.classList.toggle('hidden', !showPast);
      eventCard.classList.add('hidden');
    }
    updateEventSelection();
    renderMapPoints();
    resetMapZoom(); // Resetear zoom al cambiar de tipo de evento
  }

  function startAnimation() {
    if (events && events.length > 0 && events[currentEventIndex]) {
      events[currentEventIndex].isActive = true;
      events[currentEventIndex].progress = progress;
      updateEventDisplay();
      intervalId = window.setInterval(() => {
        progress += (UPDATE_INTERVAL / ANIMATION_DURATION) * 100;
        if (events && events[currentEventIndex]) {
          events[currentEventIndex].progress = progress;
          updateEventDisplay();
          if (progress >= 100) {
            events[currentEventIndex].isActive = false;
            events[currentEventIndex].progress = 0;
            currentEventIndex = (currentEventIndex + 1) % events.length;
            if (events[currentEventIndex]) {
              events[currentEventIndex].isActive = true;
              progress = 0;
              events[currentEventIndex].progress = progress;
              updateEventDisplay();
            }
          }
        }
      }, UPDATE_INTERVAL);
    }
  }

  function updateEventDisplay() {
    const eventItems = document.querySelectorAll('#eventsGrid .event-item');
    eventItems.forEach((item, index) => {
      const event = events[index];
      const progressBar = item.querySelector('.progress-bar');
      if (event && event.isActive) {
        item.classList.add('bg-white/30');
        if (progressBar) progressBar.style.width = `${event.progress}%`;
      } else {
        item.classList.remove('bg-white/30');
        if (progressBar) progressBar.style.width = '0%';
      }
    });
  }

  // Variables de paginación
  let currentPage = 1;
  const eventsPerPage = 5;
  let allUpcomingEvents = [];
  let allPastEvents = [];

  // Función para cargar eventos paginados
  function loadPaginatedEvents() {
    const startIndex = (currentPage - 1) * eventsPerPage;
    const endIndex = startIndex + eventsPerPage;
    
    if (showPastEvents) {
      pastEvents.length = 0;
      pastEvents.push(...allPastEvents.slice(startIndex, endIndex));
    } else {
      upcomingEvents.length = 0;
      upcomingEvents.push(...allUpcomingEvents.slice(startIndex, endIndex));
    }
    
    renderEventLists();
    updatePaginationControls();
  }

  // Función para renderizar las listas de eventos
  function renderEventLists() {
    const upcomingList = document.getElementById('upcomingEventsList');
    const pastList = document.getElementById('pastEventsList');
    
    if (upcomingList) {
      upcomingList.innerHTML = '';
      upcomingEvents.forEach(event => {
        const eventDiv = document.createElement('div');
        eventDiv.className = 'event-item p-3 cursor-pointer transition-all duration-300 relative';
        eventDiv.dataset.eventId = event.id;
        eventDiv.innerHTML = `<h3 class="m-0 text-base font-normal text-[#003035]">${event.titulo}</h3>`;
        upcomingList.appendChild(eventDiv);
      });
      
      if (upcomingEvents.length === 0) {
        upcomingList.innerHTML = '<div class="p-4 text-center text-gray-500"><p>No hay eventos próximos disponibles</p></div>';
      }
    }
    
    if (pastList) {
      pastList.innerHTML = '';
      pastEvents.forEach(event => {
        const eventDiv = document.createElement('div');
        eventDiv.className = 'event-item p-3 cursor-pointer transition-all duration-300 relative';
        eventDiv.dataset.eventId = event.id;
        eventDiv.innerHTML = `<h3 class="m-0 text-base font-normal text-[#003035]">${event.titulo}</h3>`;
        pastList.appendChild(eventDiv);
      });
    }
  }

  // Función para actualizar controles de paginación
  function updatePaginationControls() {
    const prevButton = document.getElementById('prevPage');
    const nextButton = document.getElementById('nextPage');
    const pageInfo = document.getElementById('pageInfo');
    
    const currentEvents = showPastEvents ? allPastEvents : allUpcomingEvents;
    const totalPages = Math.ceil(currentEvents.length / eventsPerPage);
    
    if (prevButton) prevButton.disabled = currentPage <= 1;
    if (nextButton) nextButton.disabled = currentPage >= totalPages;
    if (pageInfo) pageInfo.textContent = `Página ${currentPage} de ${totalPages}`;
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Cargar todos los eventos
    allUpcomingEvents = [...upcomingEvents];
    allPastEvents = [...pastEvents];
    
    startAnimation();
    loadPaginatedEvents();
    
    // Event listeners para tabs
    document.querySelectorAll('[data-tab]').forEach(btn => {
      btn.addEventListener('click', function() {
        const showPast = this.dataset.tab === 'past';
        currentPage = 1; // Reset a la primera página
        toggleEventType(showPast);
        loadPaginatedEvents();
      });
    });
    
    // Event listeners para paginación
    const prevButton = document.getElementById('prevPage');
    const nextButton = document.getElementById('nextPage');
    
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          loadPaginatedEvents();
        }
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        const currentEvents = showPastEvents ? allPastEvents : allUpcomingEvents;
        const totalPages = Math.ceil(currentEvents.length / eventsPerPage);
        if (currentPage < totalPages) {
          currentPage++;
          loadPaginatedEvents();
        }
      });
    }
    
    // Event listeners para elementos de eventos usando delegación de eventos
    document.addEventListener('click', function(e) {
      const target = e.target;
      const eventItem = target.closest('.event-item');
      if (eventItem && (eventItem.closest('#upcomingEventsList') || eventItem.closest('#pastEventsList'))) {
        selectEvent(eventItem);
      }
    });
    
    // Event listener para el botón de cerrar
    const closeButton = document.getElementById('closeEventButton');
    if (closeButton) {
      closeButton.addEventListener('click', closeEventCard);
    }
    
    // Event listener para el botón de reset del zoom
    const resetButton = document.getElementById('resetZoomButton');
    if (resetButton) {
      resetButton.addEventListener('click', resetMapZoom);
    }
    
    renderMapPoints();
  });
  
  window.addEventListener('beforeunload', function() { 
    if (intervalId) { 
      clearInterval(intervalId); 
    } 
  });
</script>