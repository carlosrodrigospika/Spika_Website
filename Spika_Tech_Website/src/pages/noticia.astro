---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Layout from '../layouts/Layout.astro';
import SideNav from '../components/SideNav.astro';
import { noticias, obtenerNoticiasRelacionadas } from '../data/noticias';

// Obtener el ID de la noticia desde la URL
const urlParams = new URLSearchParams(Astro.url.search);
const noticiaId = urlParams.get('id');

// Buscar la noticia por ID o usar la primera como fallback
const noticiaActual = noticiaId 
  ? noticias.find(n => n.id === parseInt(noticiaId)) || noticias[0]
  : noticias[0];

// Obtener noticias relacionadas
const noticiasRelacionadas = obtenerNoticiasRelacionadas(noticiaActual, 3);
---

<Layout>
  <Header />
  <SideNav sections={[]} />
  
  <!-- Página de Noticia Individual -->
  <main class="min-h-screen bg-[#dbdbdb]">
    <!-- Header de la noticia -->
    <div class="md:mx-15 bg-white pt-[10vh] md:pt-[13vh] pb-[10vh]">
      <!-- Categoría -->
      <div class="text-center mb-4">
        <span id="noticia-categoria" class="text-sm font-semibold text-gray-500 uppercase tracking-wide">
          {noticiaActual.categoria}
        </span>
      </div>
      
      <!-- Título principal -->
      <h1 id="noticia-titulo" class="text-2xl md:text-4xl lg:text-5xl font-bold text-white-800 text-center mb-4 leading-tight px-15 py-7 bg-[#4b858e]">
        {noticiaActual.titulo}
      </h1>
      
      <!-- Fecha -->
      <div class="text-center mb-1 lg:mb-10">
        <span id="noticia-fecha" class="text-gray-600 text-lg">
          {noticiaActual.fecha}
        </span>
      </div>
      
      <!-- Imagen destacada -->
      <div class="md:mb-6 lg:mb-12 lg:px-15">
        <div class="relative">
          <img 
            id="noticia-imagen"
            src={noticiaActual.imagen} 
            alt={noticiaActual.titulo}
            class="w-full h-80 md:h-[400px] object-contain"
            loading="lazy"
          />
        </div>
      </div>
      
      <!-- Contenido del artículo -->
      <article class="prose prose-lg max-w-none mb-12 px-5 md:px-15">
        <div id="noticia-contenido" class="text-gray-700 leading-relaxed text-lg" set:html={noticiaActual.contenido}></div>
      </article>
      
      <!-- Etiquetas -->
      <div class="mb-12 px-10">
        {noticiaActual.etiquetas && noticiaActual.etiquetas.length > 0 && (
          <>
            <h3 id="noticia-etiquetas-titulo" class="text-xl font-bold text-gray-800 mb-4" data-i18n="Noticias.etiquetas"></h3>
            <div id="noticia-etiquetas-container" class="flex flex-wrap gap-3">
              {noticiaActual.etiquetas.map((etiqueta: string) => (
                <span class="px-4 py-2 bg-[#477E86] text-white rounded-full text-sm font-medium cursor-pointer">
                  {etiqueta}
                </span>
              ))}
            </div>
          </>
        )}
        
        <!-- Botón Volver a Noticias -->
        <div class="flex justify-end mt-6">
          <button 
            onclick="window.location.href='/noticias'"
            class="volver-btn flex items-center space-x-2 px-6 py-3 bg-[#003035] text-white rounded-xl shadow-lg hover:bg-[#004045] hover:cursor-pointer hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            <span class="font-semibold" data-i18n="Noticias.volver"></span>
          </button>
        </div>
      </div>
      
      <!-- Más noticias -->
      <div class="border-t border-gray-200 pt-12 px-10">
        <h3 class="text-2xl font-bold text-gray-800 mb-8" data-i18n="Noticias.masNoticias"></h3>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6" id="noticiasRelacionadas">
          {noticiasRelacionadas.map(noticiaRel => (
            <article class="noticia-card group bg-white overflow-hidden cursor-pointer" 
                      data-noticia={JSON.stringify(noticiaRel)}>
              <!-- Imagen de la noticia -->
              <div class="relative overflow-hidden">
                <div class="aspect-w-16 aspect-h-9 bg-gray-200">
                  <img 
                    src={noticiaRel.imagen} 
                    alt={noticiaRel.titulo}
                    class="w-full h-48 object-cover transition-transform duration-700 group-hover:scale-110"
                    loading="lazy"
                  />
                </div>
                <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              </div>
              
              <!-- Contenido de la noticia -->
              <div class="flex flex-col gap-4 aling-center mt-4">
                <h4 class="text-lg font-semibold text-[#003035] line-clamp-2 relative">
                  {noticiaRel.titulo}
                  <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-[#003035] group-hover:w-full transition-all duration-500 ease-out"></span>
                </h4>
                <p class="text-[#003035] text-sm line-clamp-3">
                  {noticiaRel.descripcion}
                </p>
                
                <!-- Fecha y flecha amarilla -->
                <div class="flex items-center justify-between">
                  <span class="text-xs text-gray-500 group-hover:text-gray-600 transition-colors duration-300">{noticiaRel.fecha}</span>
                  
                  <!-- Flecha amarilla que aparece al hacer hover -->
                  <div class="opacity-0 group-hover:opacity-100 transition-all duration-300 group-hover:translate-x-0 translate-x-2">
                    <svg class="w-7 h-7 text-[#CEDF00]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                    </svg>
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<script>
  // Importar datos desde el archivo centralizado
  import { noticias, obtenerNoticiasRelacionadas } from '../data/noticias';

  // Función para actualizar la URL sin recargar la página
  function actualizarURL(noticiaId: number) {
    const url = new URL(window.location.href);
    url.searchParams.set('id', noticiaId.toString());
    window.history.pushState({}, '', url.toString());
  }

  // Función para actualizar el contenido de la noticia
  function actualizarContenidoNoticia(noticia: any) {
    
    // Primero, ocultar el contenido actual con fade out
    const contenidoPrincipal = document.querySelector('.mx-15.bg-white') as HTMLElement;
    if (contenidoPrincipal) {
      contenidoPrincipal.style.opacity = '0';
      contenidoPrincipal.style.transform = 'translateY(20px)';
      contenidoPrincipal.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    }
    
    // Después de la animación de fade out, actualizar el contenido
    setTimeout(() => {
      // Actualizar categoría
      const categoriaElement = document.getElementById('noticia-categoria') as HTMLElement;
      if (categoriaElement) categoriaElement.textContent = noticia.categoria;
      
      // Actualizar título
      const tituloElement = document.getElementById('noticia-titulo') as HTMLElement;
      if (tituloElement) tituloElement.textContent = noticia.titulo;
      
      // Actualizar fecha
      const fechaElement = document.getElementById('noticia-fecha') as HTMLElement;
      if (fechaElement) fechaElement.textContent = noticia.fecha;
      
      // Actualizar imagen
      const imagenElement = document.getElementById('noticia-imagen') as HTMLImageElement;
      if (imagenElement) {
        imagenElement.src = noticia.imagen;
        imagenElement.alt = noticia.titulo;
      }
      
      // Actualizar contenido
      const contenidoElement = document.getElementById('noticia-contenido') as HTMLElement;
      if (contenidoElement) contenidoElement.innerHTML = noticia.contenido;
      
      // Actualizar las etiquetas
      const etiquetasContainer = document.getElementById('noticia-etiquetas-container') as HTMLElement;
      const etiquetasTitle = document.getElementById('noticia-etiquetas-titulo') as HTMLElement;
      
      if (etiquetasContainer && etiquetasTitle) {
        // Limpiar contenedor de etiquetas
        etiquetasContainer.innerHTML = '';
        
        // Mostrar u ocultar título y contenedor según si hay etiquetas
        if (noticia.etiquetas && Array.isArray(noticia.etiquetas) && noticia.etiquetas.length > 0) {
          etiquetasTitle.style.display = 'block';
          etiquetasContainer.style.display = 'flex';
          
          noticia.etiquetas.forEach((etiqueta: string) => {
            const span = document.createElement('span');
            span.className = 'px-4 py-2 bg-[#477E86] text-white rounded-full text-sm font-medium cursor-pointer';
            span.textContent = etiqueta;
            etiquetasContainer.appendChild(span);
          });
        } else {
          etiquetasTitle.style.display = 'none';
          etiquetasContainer.style.display = 'none';
        }
      }
      
      // Mostrar el contenido actualizado con fade in
      if (contenidoPrincipal) {
        contenidoPrincipal.style.opacity = '1';
        contenidoPrincipal.style.transform = 'translateY(0)';
      }
    }, 300);
  }

  // Función para actualizar noticias relacionadas
  function actualizarNoticiasRelacionadas(noticia: any) {
    const noticiasRelacionadas = obtenerNoticiasRelacionadas(noticia, 3);
    const containerRelacionadas = document.getElementById('noticiasRelacionadas');
    
    if (containerRelacionadas) {
      // Ocultar las noticias relacionadas actuales
      (containerRelacionadas as HTMLElement).style.opacity = '0';
      (containerRelacionadas as HTMLElement).style.transform = 'translateY(20px)';
      (containerRelacionadas as HTMLElement).style.transition = 'opacity 0.3s ease, transform 0.3s ease';
      
      setTimeout(() => {
        containerRelacionadas.innerHTML = '';
        noticiasRelacionadas.forEach((noticiaRel, index) => {
          const article = document.createElement('article');
          article.className = 'noticia-card group bg-white overflow-hidden cursor-pointer';
          article.setAttribute('data-noticia', JSON.stringify(noticiaRel));
          article.style.opacity = '0';
          article.style.transform = 'translateY(20px)';
          article.style.transition = `opacity 0.3s ease ${index * 0.1}s, transform 0.3s ease ${index * 0.1}s`;
          
          article.innerHTML = `
            <div class="relative overflow-hidden">
              <div class="aspect-w-16 aspect-h-9 bg-gray-200">
                <img 
                  src="${noticiaRel.imagen}" 
                  alt="${noticiaRel.titulo}"
                  class="w-full h-48 object-cover transition-transform duration-700 group-hover:scale-110"
                  loading="lazy"
                />
              </div>
              <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            </div>
            
            <div class="flex flex-col gap-4 aling-center mt-4">
              <h4 class="text-lg font-semibold text-[#003035] line-clamp-2 relative">
                ${noticiaRel.titulo}
                <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-[#003035] group-hover:w-full transition-all duration-500 ease-out"></span>
              </h4>
              <p class="text-[#003035] text-sm line-clamp-3">
                ${noticiaRel.descripcion}
              </p>
              
              <div class="flex items-center justify-between">
                <span class="text-xs text-gray-500 group-hover:text-gray-600 transition-colors duration-300">${noticiaRel.fecha}</span>
                
                <!-- Flecha amarilla que aparece al hacer hover -->
                <div class="opacity-0 group-hover:opacity-100 transition-all duration-300 group-hover:translate-x-0 translate-x-2">
                  <svg class="w-7 h-7 text-[#003035]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </div>
              </div>
            </div>
          `;
          
          // Agregar event listener para hacer clickeable la noticia relacionada
          article.addEventListener('click', () => {
            // Guardar en localStorage como respaldo
            localStorage.setItem('noticiaActual', JSON.stringify(noticiaRel));
            // Navegar a la noticia con parámetro de URL
            window.location.href = `/noticia?id=${noticiaRel.id}`;
          });
          
          containerRelacionadas.appendChild(article);
          
          // Animar la aparición de cada artículo
          setTimeout(() => {
            article.style.opacity = '1';
            article.style.transform = 'translateY(0)';
          }, 50);
        });
        
        // Mostrar el contenedor de noticias relacionadas
        setTimeout(() => {
          (containerRelacionadas as HTMLElement).style.opacity = '1';
          (containerRelacionadas as HTMLElement).style.transform = 'translateY(0)';
        }, 100);
      }, 300);
    }
  }

  // Leer la noticia desde localStorage al cargar la página (solo si no hay ID en URL)
  document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const noticiaIdFromURL = urlParams.get('id');
    
    // Si hay ID en la URL, cargar esa noticia
    if (noticiaIdFromURL) {
      const noticiaId = parseInt(noticiaIdFromURL);
      const noticia = noticias.find(n => n.id === noticiaId);
      
      if (noticia) {
        // Actualizar el contenido de la página con los datos de la noticia
        actualizarContenidoNoticia(noticia);
        
        // Actualizar noticias relacionadas
        actualizarNoticiasRelacionadas(noticia);
      } else {
        console.error('No se encontró la noticia con ID:', noticiaId);
      }
    } else {
      // Si no hay ID en la URL, intentar cargar desde localStorage
      const noticiaData = localStorage.getItem('noticiaActual');
      
      if (noticiaData) {
        try {
          const noticia = JSON.parse(noticiaData);
          
          // Actualizar la URL con el ID de la noticia
          actualizarURL(noticia.id);
          
          // Actualizar el contenido de la página con los datos de la noticia
          actualizarContenidoNoticia(noticia);
          
          // Actualizar noticias relacionadas
          actualizarNoticiasRelacionadas(noticia);
          
          // Limpiar localStorage después de usar los datos
          localStorage.removeItem('noticiaActual');
          
        } catch (error) {
          console.error('Error al parsear la noticia desde localStorage:', error);
        }
      }
    }
    

  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Estilos para el contenido del artículo */
  .prose p {
    margin-bottom: 1.5rem;
    line-height: 1.8;
  }

  .prose p:last-child {
    margin-bottom: 0;
  }

  /* Efectos de hover para las etiquetas */
  .etiqueta:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  /* Transiciones suaves para el contenido principal */
  .max-w-4xl.mx-auto {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  /* Transiciones para noticias relacionadas */
  #noticiasRelacionadas {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  /* Animaciones para las noticias relacionadas */
  .noticia-card {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  /* Estado de carga */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }

  /* Animación de fade in para contenido nuevo */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .fade-in-up {
    animation: fadeInUp 0.5s ease forwards;
  }

  /* Estilos para el botón de volver */
  .volver-btn {
    position: relative;
    overflow: hidden;
  }

  .volver-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }

  .volver-btn:hover::before {
    left: 100%;
  }

  /* Efecto de pulso sutil en hover */
  .volver-btn:hover {
    animation: pulse 0.3s ease-in-out;
  }

  @keyframes pulse {
    0% { transform: scale(1) translateY(0); }
    50% { transform: scale(1.02) translateY(-1px); }
    100% { transform: scale(1) translateY(-1px); }
  }
</style> 