---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Layout from '../layouts/Layout.astro';
import SideNav from '../components/SideNav.astro';

const sections = [
  { num: '01', title: 'Magallanes.sections.01' },
  { num: '02', title: 'Magallanes.sections.02' },
];
---

<Layout>
  <Header />
  <SideNav sections={sections} />
  <main id="main-scroll" class="w-full min-h-screen overflow-hidden lg:overflow-visible">
    <!-- Inicio -->
    <section class="relative w-full min-h-screen flex flex-col justify-between bg-[#000000]" style="min-height: 100vh;justify-content: end;">
      <video
            class="absolute inset-0 w-full h-full object-cover z-0"
            src="/assets/Logo_LPVM.mp4"
            autoplay
            muted
            playsinline
          ></video>
      <div class="w-1/2 flex flex-col mb-8 z-2" style="align-self: end;">
        <hr class="border-t border-[#FFFFFF] w-3/4 mb-2" />
        <div class="flex items-center w-3/4 gap-2 text-[#FFFFFF] text-lg" style="justify-content: space-between;">
          <span class="cursor-pointer hover:opacity-70 transition-opacity" data-i18n="Magallanes.hero.explore" onclick="document.querySelector('#section1').scrollIntoView({behavior: 'smooth'})"></span>
          <svg 
            width="28" 
            height="28" 
            fill="none" 
            viewBox="0 0 24 24"  
            class="cursor-pointer hover:opacity-70 transition-opacity"
            onclick="document.querySelector('#section1').scrollIntoView({behavior: 'smooth'})">
            <circle cx="12" cy="12" r="11" stroke="#FFFFFF" stroke-width="2"/>
            <path d="M8 12l4 4 4-4" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
      </div>
    </section>

    <!-- Split con objeto 3D -->
    <section class="relative min-h-[60vh] h-auto lg:h-screen flex flex-row items-stretch overflow-visible px-0">
      <!-- Lado izquierdo blanco - solo visible en escritorio -->
      <div class="relative w-[35%] flex items-center justify-end bg-[#003035] hidden lg:flex">
        <div class="relative h-full flex items-center justify-center w-full">
            <img id="astrolabio-hero-placeholder" src="/assets/Render/Astrolabio.webp" alt="Astrolabio Preview" style="width: 320px; height: 320px; object-fit: contain; position: absolute; left: 100%; transform: translate(-60%, 0); z-index: 1;">
            <canvas id="astrolabio-hero-canvas" style="position: absolute; left: 100%; transform: translate(-60%, 0); z-index: 2; opacity: 0;"></canvas>
        </div>
      </div>
      <!-- Lado derecho color -->
      <div class="w-full lg:w-[65%] bg-[#FFFFFF] flex flex-col justify-between items-start px-8 py-16 min-h-[60vh] h-full relative lg:pl-[12vw]" style="">
        <div class="flex-1 flex flex-col justify-center">
          <h2 class="text-5xl lg:text-7xl mb-2 leading-tight text-left md:text-center magallanes-split-text" style="transform: translateX(100%); opacity: 0; transition: all 1.5s cubic-bezier(0.4, 0, 0.2, 1);">
            <span class="text-[#003035]" data-i18n="Magallanes.experience.title.prefix"></span><br />
            <span class="text-[#CEDF00]" data-i18n="Magallanes.experience.title.highlight"></span> 
          </h2>
          <div class="w-full border-t border-[#003035] my-4 lg:my-6 magallanes-split-line" style="transform: scaleX(0); opacity: 0; transition: all 1.2s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.4s; transform-origin: center;"></div>

          <div class="w-full flex lg:justify-end md:justify-center">
            <p class="text-xs max-w-xs text-left font-light mt-4 mb-2 mr-4 magallanes-split-description" style="font-size: 13px; transform: translateX(100%); opacity: 0; transition: all 1.5s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.8s;">
              <span class="text-[#003035]" data-i18n="Magallanes.experience.subtitle" style="text-align: justify;"></span>  
            </p>
          </div>
          
          <!-- Astrolabio centrado debajo del texto - solo visible en móvil/tablet -->
          <div class="flex items-center justify-center mt-8 lg:hidden magallanes-split-mobile-model" style="transform: translateX(100%); opacity: 0; transition: all 1.5s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 1.2s;">
            <img id="astrolabio-mobile-placeholder" src="/assets/Render/Astrolabio.webp" alt="Astrolabio Preview" style="width: 200px; height: 200px; object-fit: contain; position: absolute; z-index: 1;">
            <canvas id="astrolabio-mobile-canvas" style="width: 200px; height: 200px; position: relative; z-index: 2; opacity: 0;"></canvas>
          </div>
        </div>
      </div>
    </section>

    <!-- Contenedor de scroll horizontal simulado (3 secciones) -->
    <section id="section1" class="relative w-full h-auto lg:h-[300vh]">
      <div id="horizontal-container" class="sticky top-0 left-0 flex flex-col lg:flex-row w-full lg:w-[550vw] min-h-[60vh] h-auto lg:h-screen overflow-hidden">
        <!-- Video (primera horizontal) -->
        <div class=" max-w-[100vw] h-auto w-full relative flex items-center justify-center z-2" style="aspect-ratio: 16/9;">
          <video
            class="absolute inset-0 w-full h-full object-cover z-0"
            src="/assets/Elcano_y_Magallanes_Teaser.mp4"
            autoplay
            loop
            muted
            playsinline
          ></video>
        </div>
        
        <div class="w-full bg-white flex flex-col lg:flex-row">
          
          <!-- Viaje inmersivo de Realidad Virtual -->
          <div class="flex flex-col justify-center px-8 md:px-16 py-8 horizontal-text-section" style="width: 50vw; padding-left: 6vw;">
            <div class="text-left">
              <div class="flex items-center mb-2">
                <span class="text-5xl md:text-6xl font-light text-[#003035] mr-4 magallanes-number" style="transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);">01</span>
                <div class="flex-1 border-t border-[#003035] magallanes-line" style="transform: scaleX(0); opacity: 0; transition: all 1s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.3s; transform-origin: left;"></div>
              </div>
              <h2 class="text-3xl md:text-4xl font-light text-[#003035] mb-4 text-center magallanes-title" style="width: 80%; text-align: left; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.6s;">
                <span data-i18n="Magallanes.slides.slide1.title.prefix"></span> 
                <span class="text-[#CEDF00]" data-i18n="Magallanes.slides.slide1.title.highlight"></span> 
              </h2>
              <p class="text-gray-700 text-lg md:text-xl max-w-xl magallanes-content" data-i18n="Magallanes.slides.slide1.description" style="margin-top: 50px; width: 70%; display: flex; margin-left: auto; text-align: justify; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.9s;"></p>
            </div>
          </div>

          <!-- Imagen 1 -->
        <!-- <img
            src="/assets/Slide1_LPVM.webp"
            alt="Viaje inmersivo de Realidad Virtual"
            style="width: 100vw"
          />-->

          <!-- Imagen 2 -->
          <img
            src="/assets/Slide2_LPVM.webp"
            alt="Instrumentos de Realidad Aumentada Realistas"
            style="width: 100vw"
          />

          <!-- Instrumentos de Realidad Aumentada Realistas -->
          <div class="flex flex-col justify-center px-8 md:px-16 py-8 horizontal-text-section" style="width: 50vw">
            <div class="text-left">
              <div class="flex items-center mb-2">
                <span class="text-5xl md:text-6xl font-light text-[#003035] mr-4 magallanes-number" style="transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);">02</span>
                <div class="flex-1 border-t border-[#003035] magallanes-line" style="transform: scaleX(0); opacity: 0; transition: all 1s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.3s; transform-origin: left;"></div>
              </div>
              <h2 class="text-3xl md:text-4xl font-light text-[#003035] mb-4 text-center magallanes-title" style="width: 80%; text-align: left; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.6s;">
                <span data-i18n="Magallanes.slides.slide2.title.prefix"></span> <span class="text-[#CEDF00]" data-i18n="Magallanes.slides.slide2.title.highlight"></span> <span data-i18n="Magallanes.slides.slide2.title.suffix"></span>
              </h2>
              <p class="text-gray-700 text-lg md:text-xl max-w-xl magallanes-content" data-i18n="Magallanes.slides.slide2.description" style="margin-top: 50px; width: 70%; display: flex; margin-left: auto; text-align: justify; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.9s;"></p>
            </div>
          </div>

          <!-- Imagen 3 -->
          <img
            src="/assets/Slide3_LPVM.webp"
            alt="Vídeo histórico de 360º"
            style="width: 100vw"
          />

           <!-- 360º -->
           <div class="flex flex-col justify-center px-8 md:px-16 py-8 horizontal-text-section" style="width: 50vw">
            <div class="text-left">
              <div class="flex items-center mb-2">
                <span class="text-5xl md:text-6xl font-light text-[#003035] mr-4 magallanes-number" style="transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);">03</span>
                <div class="flex-1 border-t border-[#003035] magallanes-line" style="transform: scaleX(0); opacity: 0; transition: all 1s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.3s; transform-origin: left;"></div>
              </div>
              <h2 class="text-3xl md:text-4xl font-light text-[#003035] mb-4 text-center magallanes-title" style="width: 80%; text-align: left; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.6s;">
                <span data-i18n="Magallanes.slides.slide3.title"></span>
              </h2>
              <p class="text-gray-700 text-lg md:text-xl max-w-xl magallanes-content" data-i18n="Magallanes.slides.slide3.description" style="margin-top: 50px; width: 70%; display: flex; margin-left: auto; text-align: justify; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.9s;"></p>
            </div>
          </div>

          <!-- Imagen 4 -->
          <img
            class="lpvm-image"
            src="/assets/RenderArmadura.webp"
            alt="Experiencia histórica y realista"
            style="width: 40vw"
          />

          <!-- Experiencia histórica y realista -->
          <div class="flex flex-col justify-center px-8 md:px-16 py-8 horizontal-text-section" style="width: 60vw">
            <div class="text-left">
              <div class="flex items-center mb-2">
                <span class="text-5xl md:text-6xl font-light text-[#003035] mr-4 magallanes-number" style="transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);">04</span>
                <div class="flex-1 border-t border-[#003035] magallanes-line" style="transform: scaleX(0); opacity: 0; transition: all 1s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.3s; transform-origin: left;"></div>
              </div>
              <h2 class="text-3xl md:text-4xl font-light text-[#003035] mb-4 text-center magallanes-title" style="width: 80%; text-align: left; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.6s;">
                <span class="text-[#CEDF00]" data-i18n="Magallanes.slides.slide4.title.highlight"></span> <span data-i18n="Magallanes.slides.slide4.title.suffix"></span>
              </h2>
              <p class="text-gray-700 text-lg md:text-xl max-w-xl magallanes-content" data-i18n="Magallanes.slides.slide4.description" style="margin-top: 50px; width: 70%; display: flex; margin-left: auto; text-align: justify; transform: translateY(-30px); opacity: 0; transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.9s;"></p>
            </div>
          </div>
      </div>
    </section>

    <!--  images -->
    <section id="section2" class="w-full flex flex-col gap-12 py-12 px-8 md:px-12" style="padding-left: 12vw;">
      <!-- Imagen 1: arriba a la izquierda -->
      <img src="/assets/barco.gif" alt="Barco" class="w-full lg:row-start-3 lg:col-start-1 lg:row-end-4 magallanes-gallery-image" style="height: auto; width: 49vw; flex; align-self: start; transform: scaleX(0); opacity: 0; transition: all 2.5s cubic-bezier(0.4, 0, 0.2, 1); transform-origin: left;" />
        <!-- Imagen 2: en medio a la derecha -->
      <img src="/assets/Almacenaje.webp" alt="Almacenaje" class="w-full lg:row-start-2 lg:col-start-2 lg:row-end-3 magallanes-gallery-image" style="height: auto; width: 44vw; display:flex; align-self: end; transform: scaleX(0); opacity: 0; transition: all 2.5s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 0.5s; transform-origin: left;" />
      <!-- Imagen 3: abajo a la izquierda -->
      <img src="/assets/Bodega.webp" alt="Bodega" class="w-full lg:row-start-1 lg:col-start-1 lg:row-end-2 magallanes-gallery-image" style="height: auto; width: 68vw; display: flex; align-self: center; transform: scaleX(0); opacity: 0; transition: all 2.5s cubic-bezier(0.4, 0, 0.2, 1); transition-delay: 1s; transform-origin: left;" />
    </section>

    <script>


      function setupHorizontalScroll() {
        const horizontalZone = document.getElementById('section1')!;
        const horizontalContainer = document.getElementById('horizontal-container')!;
        if (!horizontalZone || !horizontalContainer) return;
      
        // Solo aplicar scroll horizontal en pantallas grandes
        if (window.innerWidth < 1200) {
          return;
        }

        // Configuración inicial
        const containerWidth = horizontalContainer.scrollWidth;
        const windowWidth = window.innerWidth;
        const totalHeight = horizontalZone.offsetHeight;
        const scrollableHeight = totalHeight - window.innerHeight;
        
        // Snap points en píxeles horizontales
        const SNAP_POINTS = [
          0,                            // 1. Video completo
          windowWidth * 1,              // 2. Texto1 + mitad imagen1 
          windowWidth * 2,              // 3. Mitad imagen2 + texto2 
          windowWidth * 3.5,              // 4. Mitad imagen3 + texto3 
          containerWidth - windowWidth   // 5. Imagen4 + texto4
        ];
      
        // Posiciones verticales (% del scroll)
        const VERTICAL_POSITIONS = [0, 0.25, 0.5, 0.75, 1];
      
        let isAnimating = false;
        let currentSnapIndex = 0;
        let wheelCount = 0;
        let lastWheelTime = 0;
        let isInHorizontalSection = false;
        let isAtEdge = false;
        let hasUserInteracted = false; // Para saber si el usuario ha interactuado con el wheel
      
        function goToSnap(index:any) {
          if (isAnimating) return;
          
          isAnimating = true;
          currentSnapIndex = index;
          
          const start = horizontalZone.offsetTop;
          const targetScrollY = start + (VERTICAL_POSITIONS[index] * scrollableHeight);
          const targetTranslateX = Math.min(SNAP_POINTS[index], containerWidth - windowWidth);
      
          horizontalContainer.style.transition = 'transform 1.5s cubic-bezier(0.4, 0.0, 0.2, 1)';
          horizontalContainer.style.transform = `translateX(-${targetTranslateX}px)`;
          
          window.scrollTo({
            top: targetScrollY,
            behavior: 'smooth'
          });

          // Animar elementos de Magallanes cuando se navega a un snap point
          setTimeout(() => {
            (window as any).animateMagallanesElementsBySection(index);
          }, 800); // Esperar a que el scroll se complete
      
          setTimeout(() => {
            isAnimating = false;
            horizontalContainer.style.transition = 'none';
            isAtEdge = (index === 0 || index === SNAP_POINTS.length - 1);
            
          }, 1500);
        }
      
        function handleWheel(e:any) {
          if (isAnimating) return;
          
          const now = Date.now();
          const delta = Math.sign(e.deltaY);
          
          // Resetear contador si ha pasado más de 300ms desde el último wheel
          if (now - lastWheelTime > 300) {
            wheelCount = 0;
          }
          
          wheelCount += delta;
          lastWheelTime = now;
      
          const scrollY = window.scrollY;
          const start = horizontalZone.offsetTop;
          const end = start + scrollableHeight;
          const wasInHorizontalSection = isInHorizontalSection;
          isInHorizontalSection = scrollY >= start && scrollY <= end;
      
          // Si no estamos en la sección horizontal, permitir scroll normal
          if (!isInHorizontalSection) {
            return;
          }
      
          // Marcar que el usuario ha interactuado
          hasUserInteracted = true;
      
          // Solo procesar si hay acumulación suficiente (2 movimientos)
          if (Math.abs(wheelCount) >= 2) {
            const direction = Math.sign(wheelCount);
            const newIndex = currentSnapIndex + direction;
            
            // Comprobar si estamos en un borde y queremos salir
            if (isAtEdge) {
              if ((currentSnapIndex === 0 && direction === -1) || 
                  (currentSnapIndex === SNAP_POINTS.length - 1 && direction === 1)) {
                // Permitir salir después de 2 movimientos
                wheelCount = 0;
                isAtEdge = false;
                return; // Permitirá el scroll nativo en el próximo movimiento
              }
            }
      
            // Navegación normal entre secciones
            if (newIndex >= 0 && newIndex < SNAP_POINTS.length) {
              goToSnap(newIndex);
              wheelCount = 0;
            }
          }
          
          // Prevenir scroll nativo solo si no estamos en un borde intentando salir
          if (!isAtEdge || (currentSnapIndex > 0 && currentSnapIndex < SNAP_POINTS.length - 1)) {
            e.preventDefault();
          }
        }
      
        function handleScroll() {
          if (isAnimating) return;
          
          const scrollY = window.scrollY;
          const start = horizontalZone.offsetTop;
          const end = start + scrollableHeight;
      
          // Actualizar estado de la sección
          const wasInHorizontalSection = isInHorizontalSection;
          isInHorizontalSection = scrollY >= start && scrollY <= end;
          
          // Solo ajustar posición horizontal si el usuario ha interactuado previamente
          if (isInHorizontalSection && hasUserInteracted) {
            const progress = (scrollY - start) / scrollableHeight;
            const targetTranslateX = progress * (containerWidth - windowWidth);
            horizontalContainer.style.transform = `translateX(-${targetTranslateX}px)`;
          } else if (!isInHorizontalSection) {
            // Resetear al entrar/salir
            if (scrollY < start) {
              currentSnapIndex = 0;
              horizontalContainer.style.transform = 'translateX(0)';
              hasUserInteracted = false; // Resetear cuando salimos completamente
              // Resetear animaciones de Magallanes
              (window as any).animateMagallanesElementsBySection(-1);
            } else if (scrollY > end) {
              currentSnapIndex = SNAP_POINTS.length - 1;
              horizontalContainer.style.transform = `translateX(-${containerWidth - windowWidth}px)`;
              hasUserInteracted = false; // Resetear cuando salimos completamente
              // NO resetear animaciones cuando salimos por abajo, mantener el estado
            }
          } else if (isInHorizontalSection && !hasUserInteracted) {
            // Si estamos en la sección horizontal pero no hemos interactuado,
            // determinar el snap point actual basado en la posición del scroll
            const progress = (scrollY - start) / scrollableHeight;
            const snapIndex = Math.round(progress * (SNAP_POINTS.length - 1));
            
            if (snapIndex !== currentSnapIndex) {
              currentSnapIndex = snapIndex;
              // Animar elementos según el snap point detectado
              (window as any).animateMagallanesElementsBySection(snapIndex);
            }
          } else if (isInHorizontalSection && !wasInHorizontalSection) {
            // Si acabamos de entrar en la sección horizontal (desde fuera),
            // determinar el snap point actual y animar
            const progress = (scrollY - start) / scrollableHeight;
            const snapIndex = Math.round(progress * (SNAP_POINTS.length - 1));
            
            if (snapIndex !== currentSnapIndex) {
              currentSnapIndex = snapIndex;
              // Animar elementos según el snap point detectado
              (window as any).animateMagallanesElementsBySection(snapIndex);
            }
            
            // Si entramos desde abajo (última sección), asegurar que se muestre el texto
            if (progress > 0.8) {
              (window as any).animateMagallanesElementsBySection(SNAP_POINTS.length - 1);
            }
          }
        }
      
        // Eventos
        window.addEventListener('wheel', handleWheel, { passive: false });
        window.addEventListener('scroll', handleScroll, { passive: true });
        window.addEventListener('resize', () => {
          setTimeout(() => {
            if (isInHorizontalSection) {
              goToSnap(currentSnapIndex);
            }
          }, 100);
        });
      
        // Inicialización
        handleScroll();
        horizontalContainer.style.transform = 'translateX(0)';
        isAtEdge = true; // Estamos en el primer snap point
        
        // Detectar posición inicial y animar si es necesario
        setTimeout(() => {
          const scrollY = window.scrollY;
          const start = horizontalZone.offsetTop;
          const end = start + scrollableHeight;
          
          if (scrollY >= start && scrollY <= end && !hasUserInteracted) {
            const progress = (scrollY - start) / scrollableHeight;
            const snapIndex = Math.round(progress * (SNAP_POINTS.length - 1));
            if (snapIndex !== currentSnapIndex) {
              currentSnapIndex = snapIndex;
              (window as any).animateMagallanesElementsBySection(snapIndex);
            }
          }
        }, 100);
        
        // Detección adicional para cuando se carga la página muy abajo
        setTimeout(() => {
          const scrollY = window.scrollY;
          const start = horizontalZone.offsetTop;
          const end = start + scrollableHeight;
          
          // Si estamos en la sección horizontal al cargar
          if (scrollY >= start && scrollY <= end) {
            const progress = (scrollY - start) / scrollableHeight;
            const snapIndex = Math.round(progress * (SNAP_POINTS.length - 1));
            
            // Forzar la animación del snap point correspondiente
            currentSnapIndex = snapIndex;
            (window as any).animateMagallanesElementsBySection(snapIndex);
          }
        }, 500); // Delay más largo para asegurar que todo esté cargado
      
        // Función para activar la navegación horizontal desde la barra lateral
        function activateHorizontalNavigation() {
          if (isInHorizontalSection && !hasUserInteracted) {
            hasUserInteracted = true;
            goToSnap(0); // Ir al primer elemento
          }
        }
      
        // Detectar cuando se hace click en la barra lateral para ir a section1
        function setupSideNavListener() {
          const sideNavItems = document.querySelectorAll('[data-section-id="section1"]');
          sideNavItems.forEach(item => {
            item.addEventListener('click', () => {
              // Marcar que se va a navegar desde la barra lateral
              setTimeout(() => {
                activateHorizontalNavigation();
              }, 500); // Esperar a que el scroll se complete
            });
          });
        }
      
        // Configurar el listener cuando el DOM esté listo
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', setupSideNavListener);
        } else {
          setupSideNavListener();
        }
      }
      
      // Iniciar
      document.addEventListener('DOMContentLoaded', setupHorizontalScroll);
      </script>


    <script>
      import * as THREE from 'three';
      import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
      import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

      // Configuración del modelo Astrolabio
      const astrolabioConfig = {
        hero: {
          id: 'astrolabio-hero-canvas',
          placeholderId: 'astrolabio-hero-placeholder',
          modelPath: '/assets/models/Astrolabio.glb',
          scale: 1.0,
          modelPosY: -0.45,
          width: 420,
          height: 420,
          useEnhancedLighting: true
        },
        mobile: {
          id: 'astrolabio-mobile-canvas',
          placeholderId: 'astrolabio-mobile-placeholder',
          modelPath: '/assets/models/Astrolabio.glb',
          scale: 1.0,
          modelPosY: -0.3 ,
          width: 300,
          height: 300,
          useEnhancedLighting: true
        }
      };

      // Almacén de instancias de modelos
      const modelInstances: any = {};

      // Función optimizada para crear el modelo 3D del Astrolabio
      function createAstrolabioModel(config: any) {
        const canvas = document.getElementById(config.id);
        const placeholder = document.getElementById(config.placeholderId);
        
        if (!canvas || !placeholder) return;

        // Crear escena
        const scene = new THREE.Scene();
        scene.background = null;
        scene.fog = null;

        // Crear cámara
        const camera = new THREE.PerspectiveCamera(50, config.width / config.height, 0.1, 100);
        camera.position.set(0, 0, 5);

        // Crear renderer con configuración optimizada
        const renderer = new THREE.WebGLRenderer({ 
          canvas: canvas, 
          alpha: true, 
          antialias: config.useEnhancedLighting ? true : false,
          powerPreference: "high-performance",
          stencil: false,
          depth: true,
          logarithmicDepthBuffer: false
        });
        renderer.setSize(config.width, config.height);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, config.useEnhancedLighting ? 2 : 1.5));
        renderer.shadowMap.enabled = false;
        renderer.outputColorSpace = THREE.SRGBColorSpace;
        
        if (config.useEnhancedLighting) {
          renderer.toneMapping = THREE.ACESFilmicToneMapping;
          renderer.toneMappingExposure = 1.2;
        } else {
          renderer.toneMapping = THREE.NoToneMapping;
        }

        // Configurar iluminación mejorada
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
        directionalLight.position.set(5, 5, 5);
        directionalLight.castShadow = false;
        scene.add(directionalLight);

        const fillLight = new THREE.DirectionalLight(0xffffff, 0.8);
        fillLight.position.set(-5, 0, 5);
        scene.add(fillLight);

        const topLight = new THREE.DirectionalLight(0xffffff, 1.0);
        topLight.position.set(0, 10, 0);
        scene.add(topLight);

        const warmLight = new THREE.PointLight(0xffcc66, 0.8, 25);
        warmLight.position.set(-3, 2, 3);
        scene.add(warmLight);

        const coolLight = new THREE.PointLight(0x6699ff, 0.6, 25);
        coolLight.position.set(3, -2, -3);
        scene.add(coolLight);

        const frontLight = new THREE.DirectionalLight(0xffffff, 0.7);
        frontLight.position.set(0, 0, 8);
        scene.add(frontLight);

        const backLight = new THREE.DirectionalLight(0xffffff, 0.4);
        backLight.position.set(0, 0, -8);
        scene.add(backLight);

        const warmAmbient = new THREE.AmbientLight(0xfff4e6, 0.3);
        scene.add(warmAmbient);

        // Crear controles optimizados
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.screenSpacePanning = true;
        controls.maxPolarAngle = Math.PI;
        controls.minPolarAngle = 0;
        controls.autoRotate = true;
        controls.autoRotateSpeed = 3;
        controls.enableZoom = false;
        controls.enablePan = false;
        controls.enableRotate = true;

        // Variables de estado
        let model: any = null;
        let animationId: any = null;
        let isVisible = true;
        let needsRender = true;

        // Función de animación optimizada
        function animate() {
          animationId = requestAnimationFrame(animate);

          if (isVisible && model) {
            if (controls) {
              controls.update();
            }
            
            if (needsRender || controls.autoRotate) {
              renderer.render(scene, camera);
              needsRender = false;
            }
          }
        }

        // Función de resize
        function onResize() {
          if (camera && renderer) {
            camera.aspect = config.width / config.height;
            camera.updateProjectionMatrix();
            renderer.setSize(config.width, config.height);
            
            if (controls) {
              controls.update();
            }
            
            needsRender = true;
          }
        }

        // Función de visibilidad
        function onVisibilityChange() {
          isVisible = !document.hidden;
          if (isVisible) needsRender = true;
        }

        // Función de limpieza
        function cleanup() {
          if (animationId) {
            cancelAnimationFrame(animationId);
          }
          if (renderer) {
            renderer.dispose();
          }
          if (controls) {
            controls.dispose();
          }
          if (scene) {
            scene.traverse((child: any) => {
              if (child.geometry) {
                child.geometry.dispose();
              }
              if (child.material) {
                if (Array.isArray(child.material)) {
                  child.material.forEach((material: any) => {
                    if (material.map) material.map.dispose();
                    material.dispose();
                  });
                } else {
                  if (child.material.map) child.material.map.dispose();
                  child.material.dispose();
                }
              }
            });
          }
        }

        // Cargar modelo
        const loader = new GLTFLoader();
        loader.load(
          config.modelPath, 
          (gltf) => {
            try {
              model = gltf.scene;
              
              // Centrar y escalar
              model.position.set(0, config.modelPosY, 0);
              model.scale.setScalar(config.scale);
              
              // Ocultar placeholder cuando el modelo se carga
              placeholder.style.opacity = '0';
              placeholder.style.transition = 'opacity 0.3s ease-out';
              canvas.style.opacity = '1';
              canvas.style.transition = 'opacity 0.3s ease-in';
              
              setTimeout(() => {
                placeholder.style.display = 'none';
              }, 300);
              
              // Optimizar geometrías y materiales
              model.traverse((child: any) => {
                if (child.isMesh) {
                  if (child.geometry) {
                    child.geometry.computeBoundingSphere();
                    child.geometry.computeBoundingBox();
                    child.geometry.computeVertexNormals();
                  }
                  
                  if (child.material) {
                    child.material.transparent = false;
                    child.material.needsUpdate = true;
                    
                    // Mejorar la iluminación de los materiales
                    if (child.material.color) {
                      child.material.color.multiplyScalar(1.1);
                    }
                
                    if (child.material.map) {
                      child.material.map.generateMipmaps = false;
                      child.material.map.minFilter = THREE.LinearFilter;
                      child.material.map.magFilter = THREE.LinearFilter;
                    }
                  }
                }
              });

              scene.add(model);
              needsRender = true;
              
            } catch (error) {
              console.error(`Error processing ${config.id} model:`, error);
            }
          }, 
          (progress) => {
            // Callback de progreso (opcional)
          }, 
          (error) => {
            console.error(`Error loading ${config.id} model:`, error);
            // Intentar cargar de nuevo después de un delay
            setTimeout(() => {
              loader.load(config.modelPath, (gltf) => {
                try {
                  model = gltf.scene;
                  model.position.set(0, config.modelPosY, 0);
                  model.scale.setScalar(config.scale);
                  scene.add(model);
                  needsRender = true;
                  
                  placeholder.style.opacity = '0';
                  placeholder.style.transition = 'opacity 0.3s ease-out';
                  canvas.style.opacity = '1';
                  canvas.style.transition = 'opacity 0.3s ease-in';
                  
                  setTimeout(() => {
                    placeholder.style.display = 'none';
                  }, 300);
                  
                } catch (retryError) {
                  console.error(`Error on retry for ${config.id}:`, retryError);
                }
              });
            }, 2000);
          }
        );

        // Iniciar animación
        animate();

        // Agregar event listeners
        window.addEventListener('resize', onResize, { passive: true });
        document.addEventListener('visibilitychange', onVisibilityChange, { passive: true });

        // Retornar funciones de limpieza
        return {
          cleanup,
          onResize,
          onVisibilityChange
        };
      }

      // Inicializar ambos modelos (hero y mobile)
      document.addEventListener('DOMContentLoaded', () => {
        Object.values(astrolabioConfig).forEach(config => {
          const instance = createAstrolabioModel(config);
          if (instance) {
            modelInstances[config.id] = instance;
          }
        });
      });

      // Limpiar todos los modelos al salir
      window.addEventListener('beforeunload', () => {
        Object.values(modelInstances).forEach((instance: any) => {
          if (instance && instance.cleanup) {
            instance.cleanup();
          }
        });
      });

      // Variables para controlar las animaciones de Magallanes
      let magallanesAnimationStates = {
        section1: false,
        section2: false,
        section3: false,
        section4: false
      };

      // Función para animar elementos de Magallanes basada en el snap point actual
      (window as any).animateMagallanesElementsBySection = function(sectionIndex: number) {
        const numbers = document.querySelectorAll('.magallanes-number');
        const lines = document.querySelectorAll('.magallanes-line');
        const titles = document.querySelectorAll('.magallanes-title');
        const contents = document.querySelectorAll('.magallanes-content');
        
        // Determinar qué sección debe animarse basada en el snap point
        let targetSection = -1;
        if (sectionIndex === 1) targetSection = 0; // Primera sección de texto
        else if (sectionIndex === 2) targetSection = 1; // Segunda sección de texto
        else if (sectionIndex === 3) targetSection = 2; // Tercera sección de texto
        else if (sectionIndex === 4) targetSection = 3; // Cuarta sección de texto
        // Si sectionIndex es 0, significa que estamos en el video, no animar nada
        
        // Solo resetear todas las animaciones si estamos completamente fuera de la sección horizontal
        if (targetSection === -1) {
          // Verificar si realmente estamos fuera de la sección horizontal
          const horizontalZone = document.getElementById('section1');
          if (horizontalZone) {
            const rect = horizontalZone.getBoundingClientRect();
            const windowHeight = window.innerHeight;
            
            // Solo resetear si la sección está completamente fuera del viewport
            if (rect.bottom < -windowHeight || rect.top > windowHeight * 2) {
              numbers.forEach((number, index) => {
                (number as HTMLElement).style.transform = 'translateY(-30px)';
                (number as HTMLElement).style.opacity = '0';
              });
              lines.forEach((line, index) => {
                (line as HTMLElement).style.transform = 'scaleX(0)';
                (line as HTMLElement).style.opacity = '0';
              });
              titles.forEach((title, index) => {
                (title as HTMLElement).style.transform = 'translateY(-30px)';
                (title as HTMLElement).style.opacity = '0';
              });
              contents.forEach((content, index) => {
                (content as HTMLElement).style.transform = 'translateY(-30px)';
                (content as HTMLElement).style.opacity = '0';
              });
            }
          }
          return;
        }
        
        // Animar solo la sección correspondiente
        const targetNumber = numbers[targetSection];
        const targetLine = lines[targetSection];
        const targetTitle = titles[targetSection];
        const targetContent = contents[targetSection]; // Cada sección tiene 1 contenido
        
        if (targetNumber) {
          (targetNumber as HTMLElement).style.transform = 'translateY(0)';
          (targetNumber as HTMLElement).style.opacity = '1';
        }
        
        if (targetLine) {
          setTimeout(() => {
            (targetLine as HTMLElement).style.transform = 'scaleX(1)';
            (targetLine as HTMLElement).style.opacity = '1';
          }, 300);
        }
        
        if (targetTitle) {
          setTimeout(() => {
            (targetTitle as HTMLElement).style.transform = 'translateY(0)';
            (targetTitle as HTMLElement).style.opacity = '1';
          }, 600);
        }
        
        if (targetContent) {
          setTimeout(() => {
            (targetContent as HTMLElement).style.transform = 'translateY(0)';
            (targetContent as HTMLElement).style.opacity = '1';
          }, 900);
        }
        
        // Solo resetear otras secciones si estamos en una sección diferente
        // Esto evita que se quiten las animaciones cuando se hace scroll sutil
        numbers.forEach((number, index) => {
          if (index !== targetSection) {
            (number as HTMLElement).style.transform = 'translateY(-30px)';
            (number as HTMLElement).style.opacity = '0';
          }
        });
        
        lines.forEach((line, index) => {
          if (index !== targetSection) {
            (line as HTMLElement).style.transform = 'scaleX(0)';
            (line as HTMLElement).style.opacity = '0';
          }
        });
        
        titles.forEach((title, index) => {
          if (index !== targetSection) {
            (title as HTMLElement).style.transform = 'translateY(-30px)';
            (title as HTMLElement).style.opacity = '0';
          }
        });
        
        contents.forEach((content, index) => {
          if (index !== targetSection) {
            (content as HTMLElement).style.transform = 'translateY(-30px)';
            (content as HTMLElement).style.opacity = '0';
          }
        });
      }

      // Función para animar elementos cuando entran en el viewport (Magallanes)
      function animateMagallanesOnScroll() {
        const splitSection = document.querySelector('section:nth-of-type(2)'); // La sección split
        if (!splitSection) return;
        
        const rect = splitSection.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        
        const splitText = document.querySelector('.magallanes-split-text');
        const splitLine = document.querySelector('.magallanes-split-line');
        const splitDescription = document.querySelector('.magallanes-split-description');
        const splitMobileModel = document.querySelector('.magallanes-split-mobile-model');
        
        // Si la sección está visible (al 80% del viewport)
        if (rect.top < windowHeight * 0.8 && rect.bottom > 0) {
          // Animar elementos hacia su posición final
          if (splitText) {
            (splitText as HTMLElement).style.transform = 'translateX(0)';
            (splitText as HTMLElement).style.opacity = '1';
          }
          
          if (splitLine) {
            (splitLine as HTMLElement).style.transform = 'scaleX(1)';
            (splitLine as HTMLElement).style.opacity = '1';
          }
          
          if (splitDescription) {
            (splitDescription as HTMLElement).style.transform = 'translateX(0)';
            (splitDescription as HTMLElement).style.opacity = '1';
          }
          
          if (splitMobileModel) {
            (splitMobileModel as HTMLElement).style.transform = 'translateX(0)';
            (splitMobileModel as HTMLElement).style.opacity = '1';
          }
        } else {
          // Si la sección no está visible, resetear a posición inicial
          if (splitText) {
            (splitText as HTMLElement).style.transform = 'translateX(100%)';
            (splitText as HTMLElement).style.opacity = '0';
          }
          
          if (splitLine) {
            (splitLine as HTMLElement).style.transform = 'scaleX(0)';
            (splitLine as HTMLElement).style.opacity = '0';
          }
          
          if (splitDescription) {
            (splitDescription as HTMLElement).style.transform = 'translateX(100%)';
            (splitDescription as HTMLElement).style.opacity = '0';
          }
          
          if (splitMobileModel) {
            (splitMobileModel as HTMLElement).style.transform = 'translateX(100%)';
            (splitMobileModel as HTMLElement).style.opacity = '0';
          }
        }
      }

      // Agregar la función de animación Magallanes al scroll
      window.addEventListener('scroll', function() {
        animateMagallanesOnScroll();
        
        // Animación de la galería de Magallanes
        animateMagallanesGallery();
        
        // Detección para la sección horizontal
        const horizontalZone = document.getElementById('section1');
        if (horizontalZone) {
          const scrollY = window.scrollY;
          const start = horizontalZone.offsetTop;
          const end = start + horizontalZone.offsetHeight - window.innerHeight;
          
          // Solo aplicar lógica horizontal en pantallas grandes
          if (window.innerWidth >= 1200) {
            // Si estamos en la sección horizontal y no hemos interactuado
            if (scrollY >= start && scrollY <= end) {
              const progress = (scrollY - start) / (end - start);
              const snapIndex = Math.round(progress * 4); // 5 snap points (0-4)
              
              // Animar elementos según la posición actual
              (window as any).animateMagallanesElementsBySection(snapIndex);
            }
          } else {
            // En pantallas medianas y pequeñas, detectar cada sección individualmente
            animateMagallanesSectionsOnScroll();
          }
        }
      });

      // Función para animar la galería de Magallanes
      function animateMagallanesGallery() {
        const gallerySection = document.getElementById('section2');
        if (!gallerySection) return;
        
        const rect = gallerySection.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        
        // Si la sección está visible (al 80% del viewport)
        if (rect.top < windowHeight * 0.8 && rect.bottom > 0) {
          const galleryImages = document.querySelectorAll('.magallanes-gallery-image');
          
          galleryImages.forEach((image) => {
            (image as HTMLElement).style.transform = 'scaleX(1)';
            (image as HTMLElement).style.opacity = '1';
          });
        } else {
          // Si la sección no está visible, resetear a posición inicial
          const galleryImages = document.querySelectorAll('.magallanes-gallery-image');
          
          galleryImages.forEach((image) => {
            (image as HTMLElement).style.transform = 'scaleX(0)';
            (image as HTMLElement).style.opacity = '0';
          });
        }
      }

      // Función para animar secciones en pantallas medianas y pequeñas
      function animateMagallanesSectionsOnScroll() {
        const textSections = document.querySelectorAll('.horizontal-text-section');
        const windowHeight = window.innerHeight;
        
        textSections.forEach((section, index) => {
          const rect = section.getBoundingClientRect();
          const sectionKey = `section${index + 1}` as keyof typeof magallanesAnimationStates;
          
          // Si la sección está visible (al 70% del viewport) y no se ha animado aún
          if (rect.top < windowHeight * 0.7 && rect.bottom > 0 && !magallanesAnimationStates[sectionKey]) {
            magallanesAnimationStates[sectionKey] = true;
            
            // Animar elementos de esta sección específica
            const number = section.querySelector('.magallanes-number');
            const line = section.querySelector('.magallanes-line');
            const title = section.querySelector('.magallanes-title');
            const contents = section.querySelectorAll('.magallanes-content');
            
            // Animar número
            if (number) {
              (number as HTMLElement).style.transform = 'translateY(0)';
              (number as HTMLElement).style.opacity = '1';
            }
            
            // Animar línea
            if (line) {
              setTimeout(() => {
                (line as HTMLElement).style.transform = 'scaleX(1)';
                (line as HTMLElement).style.opacity = '1';
              }, 300);
            }
            
            // Animar título
            if (title) {
              setTimeout(() => {
                (title as HTMLElement).style.transform = 'translateY(0)';
                (title as HTMLElement).style.opacity = '1';
              }, 600);
            }
            
            // Animar contenidos
            contents.forEach((content, contentIndex) => {
              setTimeout(() => {
                (content as HTMLElement).style.transform = 'translateY(0)';
                (content as HTMLElement).style.opacity = '1';
              }, 900 + (contentIndex * 300));
            });
          }
        });
      }
    </script>
  </main>
  <Footer />
</Layout> 

<style>
  @media (max-width: 1200px) {
      .horizontal-text-section, #section3, .features-container {
          padding-left: 110px !important;
          width: 100% !important;
      }

      .lpvm-image {
        align-self: center !important;
      }

      .model-viewer-container{
        height: 50%;
        width: 50%;
      }

      .design-description{
        justify-content: center !important;
        width: 100% !important;
        margin-left: 0 !important;
      }

      .buttons-container{
        width: 100% !important;
      }
    }

  @media (max-width: 700px) {
    .horizontal-text-section, #section3, .features-container{
            padding-left: 1.5rem !important;
            padding-right: 1.5rem !important;
    }
  }
</style>